[project]
name = "mcp-foxxy-bridge"
description = "A MCP Forward Proxy Bridge designed to be a one-to-many bridge allowing you to use a single MCP server to communicate with many MCP servers transparently."
authors = [{ name = "Billy Bryant", email = "billy@billybryant.dev" }]
license = { file = "LICENSE" }
readme = "README.md"
classifiers = [
    "Development Status :: 4 - Beta",
    "Environment :: Console",
    "Intended Audience :: Developers",
    "Intended Audience :: Information Technology",
    "Intended Audience :: System Administrators",
    "License :: OSI Approved :: GNU Affero General Public License v3 or later (AGPLv3+)",
    "Operating System :: MacOS",
    "Operating System :: POSIX :: Linux",
    "Operating System :: Unix",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3 :: Only",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Utilities",
    "Typing :: Typed",
]
dynamic = ["version"]
requires-python = ">=3.11"
dependencies = ["mcp>=1.8.0,<2.0.0", "uvicorn>=0.34.0", "jsonschema>=4.0.0"]

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project.urls]
Homepage = "https://github.com/billyjbryant/mcp-foxxy-bridge"
Source = "https://github.com/billyjbryant/mcp-foxxy-bridge"
Documentation = "https://github.com/billyjbryant/mcp-foxxy-bridge"
Changelog = "https://github.com/billyjbryant/mcp-foxxy-bridge/releases"

[project.scripts]
mcp-foxxy-bridge = "mcp_foxxy_bridge.__main__:main"
mcp-foxxy-bridge-reverse = "mcp_foxxy_bridge.__main__:client"

[tool.hatch.build.targets.wheel]
packages = ["src/mcp_foxxy_bridge"]

[tool.hatch.version]
path = "VERSION"
pattern = "(?P<version>.*)"

[tool.uv]
dev-dependencies = [
    "pytest>=8.3.3",
    "pytest-asyncio>=0.25.0",
    "coverage>=7.6.0",
    "mypy>=1.0.0",
    "hatch>=1.12.0",
    "ruff>=0.7.0",
    "pre-commit>=3.5.0",
]

[tool.coverage.run]
branch = true

[tool.coverage.report]
skip_covered = true
show_missing = true
precision = 2
exclude_lines = [
    'pragma: no cover',
    'raise NotImplementedError',
    'if TYPE_CHECKING:',
    'if typing.TYPE_CHECKING:',
    '@overload',
    '@typing.overload',
    '\(Protocol\):$',
    'typing.assert_never',
    '$\s*assert_never\(',
    'if __name__ == .__main__.:',
]

[tool.mypy]
allow_redefinition = false
disallow_untyped_defs = true
follow_imports = "normal"
follow_untyped_imports = true
no_implicit_optional = true
show_error_code_links = true
show_error_codes = true
strict = true
warn_redundant_casts = true
warn_return_any = true
warn_unreachable = true
warn_unused_configs = true
warn_unused_ignores = true

[tool.ruff.lint]
select = ["ALL"]
ignore = [
    "EM101",  # Exception must not use a string literal, assign to variable first
    "EM102",  # Exception must not use an f-string literal, assign to variable first
    "TRY003", # Avoid specifying long messages outside the exception class
    "TRY401", # Redundant exception object in logging.exception calls
    "ERA001", # Found commented-out code
    "C901",   # Function is too complex
    "PLR0915", # Too many statements
    "PLR0912", # Too many branches
    "SLF001", # Private member accessed
    "PGH003", # Use specific rule codes when ignoring type issues
    "ARG001", # Unused function argument
    "TD002",  # Missing author in TODO
    "TD003",  # Missing issue link for TODO
    "FIX002", # Line contains TODO
    "D105",   # Missing docstring in magic method
    "D107",   # Missing docstring in __init__
    "ANN401", # Dynamically typed expressions (typing.Any) are disallowed
    "PLC0415", # import should be at the top-level of a file
    "RUF034", # Useless if-else condition
    "COM812", # Trailing comma missing (conflicts with formatter)
]

[tool.ruff.lint.per-file-ignores]
"tests/*" = ["S101", "INP001"]

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff]
line-length = 100

[tool.pytest.ini_options]
pythonpath = "src"
addopts = ["--import-mode=importlib"]
asyncio_mode = "auto"
asyncio_default_fixture_loop_scope = "function"
